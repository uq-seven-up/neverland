{"version":3,"sources":["lib/Api.tsx","lib/CFKitUtil.tsx","components/getFirstDayLastDayUTC.tsx","components/flags.tsx"],"names":["API","call","method","endpoint","callback","params","a","sessionid","readCookie","config","url","withCredentials","data","headers","axios","request","response","instance","defaults","baseURL","CFKIT_API","BASE_URL","validateStatus","status","this","name","value","document","cookie","match","pop","formData","FormData","Object","entries","forEach","item","index","append","String","CFKIT_ENVIRONMENT","CFKitUtil","gross","percent","_tax","roundDecimal","nett","precision","x","Math","pow","round","i","u","random","toString","charAt","join","isDate","UNDEFINED_DATE","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","pattern","parts","length","RegExp","Date","parseInt","prototype","split","time_pattern","date_pattern","replace","_date","dateTime","setUTCFullYear","Number","setUTCMonth","setUTCDate","_time","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","src","isAPIDateTime","parseAPIDateTime","key","parseApiDatesInObject","Array","toISOString","createApiDatesInObject","isODBCDateTime","parseODBCdateTime","parseDatesInObject","ODBCDateTimeFormat","createODBCDatesInObject","id","countries","find","country","getFirstDayLastDayUTC","fDay","UTC","getUTCFullYear","getUTCMonth","month","lDay","firstDay","lastDay","isFlagSet","flag"],"mappings":"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","file":"static/js/main.55562822.chunk.js","sourcesContent":["import axios, {AxiosResponse } from 'axios';\n\n/* This variable must be set by the page that embeds the application. */\ndeclare const CFKIT_API: any;\n\ninterface Fieldset {[key:string]:string|number|boolean};\n\ntype ApiCallback = (response:AxiosResponse) => void;\n\n/**\n * Singleton for interacting with the internal aXcelerate API.\n */\nexport class API {\n    static CFKIT_ENVIRONMENT = 'development';\n    static instance:API;\n\n    constructor(){\n        if(API.instance){\n            return API.instance;\n        }\n        \n        axios.defaults.withCredentials = false;\n        axios.defaults.baseURL = CFKIT_API.BASE_URL;\n        axios.defaults.validateStatus =  function (status) {\n            return status < 500; // Reject only if the status code is greater than or equal to 500\n        };\n\n        API.instance = this;\n    }\n\n    private readCookie(name:string):string\n    {\n        let value = document.cookie.match('(^|[^;]+)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n        return value ? value.pop() : '';\n    }\n\n    /**\n     * Calls the CFKIT Rest API.\n     * \n     * @param method The API command that should be executed.\n     * @param data An object that will be passed as form fields. Each key being \n     * the fieldname and the key value the form value.\n     * @param callback A function that will be called when the ajax call completes. \n     *  The AJAX response is passed to the callback function.\n     */\n    public call = async (method:'GET'|'POST'|'PUT'|'DELETE',endpoint:string,callback:ApiCallback,params?:any) => {\n        const sessionid = this.readCookie('CFKITSESSIONID');\n        const config = {\n            method:method,\n            url:endpoint,\n            withCredentials:false,\n            data:null,\n            headers: {\n                'Authorization':sessionid,\n            }\n        };\n\n        if(params) config.data = params;\n\n        const response = await axios.request(config);\n        \n       // const formData = this.objectToFormData(data);\n        //formData.append('method',method);\n        \n        //const response = await axios.request({data:formData});\n        callback(response);\n    }\n\n    /**\n     * Converts a javascript object where each key is a simple value to\n     * a formdata object that can be passed as a part of an AJAX call. Enabling similar\n     * ajax call syntax as implemented by JQuery. \n     * \n     * @param data An object where every key is a simple value. (string|number|boolean)\n     */\n    private objectToFormData(data:Fieldset):FormData {\n        const formData = new FormData();\n        Object.entries(data).forEach(function(item,index)\n        {\n            formData.append(item[0],String(item[1]));\n        });\n\n        return formData;\n    }\n}","import {Country} from '@7up/common-types';\n\nexport class CFKitUtil \n{\n    /* ######################################################## */\n    /* Constants and Enums. */\n    /**\n     * Instead of using NULL this defines the value for an unspecified date.\n     */\n    public static UNDEFINED_DATE = new Date(1900,0,1,0,0,0,0);\n    /* ######################################################## */\n\n\n    /* ######################################################## */\n    /* Numbers and Money */\n\n     /**\n     * Calculates a nett money amount from a gross amount.\n     * \n     * @param gross - The base value.\n     * @param percent - The percentage to be applied.\n     * @returns The calculated nett amount.\n     */\n    public static calculateNett(gross:number,percent:number):number{\n        const _tax = (1 + (percent * 0.01));\n        return CFKitUtil.roundDecimal(gross / _tax);\n    }\n\n    /**\n     * Calculates a gross gross money amount from a nett amount.\n     * \n     * @param nett - The base value.\n     * @param percent - The percentage to be applied.\n     * @returns The calculated gross amount.\n     */\n    public static calculateGross(nett:number,percent:number):number{\n        const _tax = (1 + (percent * 0.01));\n        return CFKitUtil.roundDecimal(nett * _tax);\n    }\n    \n    /**\n     * Rounds up to the specified number of decimal places. 5 is rounded up.\n     * \n     * @param value - The value that is to be rounded.\n     * @param precision - The precision (number of places afte 0) that is to be rounded to.\n     * @returns The rounded amount.\n     */\n    public static roundDecimal(value:number,precision?:number)\n\t{\n\t\tlet x:number;\n\t\tprecision = (typeof precision == 'undefined') ? 2:precision;\n\t\tif(value === 0)\n\t\t{\n\t\t\treturn 0;\n\t\t}\t\t\n\t\tx = Math.pow(10,precision);\n\t\treturn Math.round(x * value) / x;\n\t}\n    /* ######################################################## */\n\n\n    /* ######################################################## */\n    /* String functions */\n    /**\n     * Creates a pseudo global unique identifier. \n     * \n     * NOTE: The algorithm does not generate a technical correct global unique identifier. However, for most practical uses in a single application it is sufficient.\n     * \n     * @returns A sufficiently unique string suitable for use as global unique identfier.\n     */\n    public static createGUID():string \n    {\n        let guid = (function () \n        {\n\t        let i:number,\n\t            c = \"89ab\",\n\t            u = [];\n\t        for (i = 0; i < 36; i += 1) {\n\t            u[i] = (Math.random() * 16 | 0).toString(16);\n\t        }\n\t        u[8] = u[13] = u[18] = u[23] = \"-\";\n\t        u[14] = \"4\";\n\t        u[19] = c.charAt(Math.random() * 4 | 0);\n\t        return u.join(\"\");\n        })();\n        \n\t    return guid;\n\t}\n    /* ######################################################## */\n\n\n    /* ######################################################## */\n    /* Date related methods. */\n    /**\n     * Formats a date as a string in ODBC Format. (as required by the CFKit API).\n     * \n     * @param value - A date value to be converted.\n     * @returns The date in ODBC Format.\n     */\n\tpublic static ODBCDateTimeFormat(value:Date):string\n\t{\n\t\tif(!CFKitUtil.isDate(value))\n\t\t{\n\t\t\tvalue = CFKitUtil.UNDEFINED_DATE;\n\t\t}\n\t\t\n\t\tlet year =  '' + value.getFullYear();\n\t\tlet month = (\"0\" + (value.getMonth() + 1)).slice(-2);\n\t\tlet day = (\"0\" + value.getDate()).slice(-2);\n\t\tlet hour = (\"0\" + value.getHours()).slice(-2);\n\t\tlet minute = (\"0\" + value.getMinutes()).slice(-2);\n\t\tlet second = (\"0\" + value.getSeconds()).slice(-2);\n\t\tlet odbcDateTime = \"{ts '\" + year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second + \"'}\";\n\t\treturn odbcDateTime;\n\t}\t\n    \n    /**\n     * Converts a string in odbc format to a date type (dates returned by the cfkit API are returned in ODBCFormat).\n     * \n     * @param value - A string in ODBC Format. {ts 'YYYY-MM-DD HH:MM:SS'} or {ts 'YYYY-MM-DD'}\n     * @returns A date object.\n     */\n\tpublic static parseODBCdateTime(value:string):Date\n\t{\n        const YMD_DELIMITER = '-';\n        let pattern:RegExp;\n        let parts:RegExpMatchArray;\n\t\t\n\t\tif(value.length == 26)\n\t\t{\n\t\t\t/* odbc date time ({ts 'YYYY-MM-DD HH:MM:SS'}) */\n\t\t\tpattern = new RegExp( \"(\\\\d{4})\" + YMD_DELIMITER + \"(\\\\d{2})\" + YMD_DELIMITER + \"(\\\\d{2}) (\\\\d{2}):(\\\\d{2}):(\\\\d{2})\" );\n\t\t\tparts = value.match(pattern);\n\t\t\treturn new Date(parseInt(parts[1]),\n\t    \t\t\t\t\tparseInt( parts[2], 10 ) - 1, /* NOTE: JS counts month from 0 to 11.*/\n\t\t\t\t\t\t    parseInt( parts[3], 10 ),\n\t\t\t\t\t\t    parseInt( parts[4], 10 ),\n\t\t\t\t\t\t    parseInt( parts[5], 10 ),\n\t\t\t\t\t\t    parseInt( parts[6], 10 ));\n\t\t}\n\t\t\n\t\t/* odbc date ({ts 'YYYY-MM-DD'}) */\n\t\tpattern = new RegExp( \"(\\\\d{4})\" + YMD_DELIMITER + \"(\\\\d{2})\" + YMD_DELIMITER + \"(\\\\d{1,2})\");\n\t\tparts = value.match(pattern);\n\t\t\n\t\treturn new Date(parseInt(parts[1]),\n    \t\t\t\t\tparseInt(parts[2], 10 ) - 1,/* NOTE: JS counts month from 0 to 11.*/\n\t\t\t\t\t    parseInt(parts[3], 10 ),\n\t\t\t\t\t    0,0,0);\n\t}\n    \n    /**\n     * Checks if the passed in value is of type date.\n     * \n     * @param value - Value to validate\n     * @returns True is the value is a date object.\n     */\n\tpublic static isDate(value:any):boolean\n\t{\n\t\tif(Object.prototype.toString.call(value) === '[object Date]')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t    return false;\n    }\n    \n\n    /**\n     * Checks if the passed in value is a string in odbc date time format. ({ts 'YYYY-MM-DD HH:MM:SS'})\n     * \n     * @param value - Value to validate\n     * @returns True is the value is a date object.\n     */\n\tpublic static isODBCDateTime(value:string):boolean\n\t{\n        const YMD_DELIMITER = '-';\n        const pattern = new RegExp( \"(\\\\d{4})\" + YMD_DELIMITER + \"(\\\\d{2})\" + YMD_DELIMITER + \"(\\\\d{2}) (\\\\d{2}):(\\\\d{2}):(\\\\d{2})\" );\n\t\tconst parts = value.match(pattern);\t\n\t    return parts !== null;\n    }\n\n    /**\n     * Checks if the passed in value is a string in api format.'YYYY-MM-DD', 'YYYY-MM-DDTHH:MM:SSz'\n     * \n     * @param value - Value to validate\n     * @returns True the value is an API date string.\n     */\n\tpublic static isAPIDateTime(value:string):boolean\n\t{\n        let parts = value.split(\"T\");\n        if(parts.length === 0 || parts.length > 2) return false;\n        if(parts.length === 2)\n        {\n            let time_pattern = new RegExp(\"\\\\d{2}:\\\\d{2}:\\\\d{2}z{0,1}$\");\n            if(parts[1].match(time_pattern) === null) return false;\n        }\n\n        let date_pattern = new RegExp(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");\n        return parts[0].match(date_pattern) !== null;\n    }\n\n    /**\n     * Parses a date or datetime string in API format to UTC. 'YYYY-MM-DD', 'YYYY-MM-DDTHH:MM:SSz'\n     * \n     * @param value - Value to validate\n     * @returns True the value is an API date string.\n     */\n\tpublic static parseAPIDateTime(value:string):Date\n\t{\n        let parts = value.replace('z','').split(\"T\");\n        let _date = parts[0].split('-');\n        \n        let dateTime = new Date();\n        dateTime.setUTCFullYear(Number(_date[0]));\n        dateTime.setUTCMonth(Number(_date[1]) - 1);/* Note: JS Month are 0 - 11. */\n        dateTime.setUTCDate(Number(_date[2]));\n        \n        if(parts.length === 2)\n        {\n            let _time = parts[1].split(':');\n            dateTime.setUTCHours(Number(_time[0]));\n            dateTime.setUTCMinutes(Number(_time[1]));\n            dateTime.setUTCSeconds(Number(_time[2]));\n        }else\n        {\n            dateTime.setUTCHours(0);\n            dateTime.setUTCMinutes(0);\n            dateTime.setUTCSeconds(0);\n        }\n        \n        dateTime.setUTCMilliseconds(0);\n        return dateTime;\n    }\n\n        /**\n     * EXPERIMENTAL: Scans the object tree including nested arrays of objects, and\n     * converts all detected string which are in ODBC Date Time format to javascript dates objects.\n     * @param src - The object which is to be scanned.\n     * @returns The passed in object with any detected odbc strings replaced by date objects.\n     */\n    public static parseApiDatesInObject(src:any):any\n    {\n        if(src === null) return src;\n        if(typeof src === 'string')\n        {\n            if(CFKitUtil.isAPIDateTime(src))\n            {\n                return CFKitUtil.parseAPIDateTime(src);\n            }\n            return src;\n        }\n\n        if(typeof src !== 'object' || src === null) return src;\n        if((src instanceof Object))\n        {\n            \n            for (let [key, value] of Object.entries(src)) \n            {\n                src[key] = CFKitUtil.parseApiDatesInObject(value);\n            }\n        }\n\n        if((src instanceof Array))\n        {\n            for (let i = 0; i < src.length; i++) {\n                src[i] = CFKitUtil.parseApiDatesInObject(src[i]);  \n            }\n        }\n\n        return src;\n    }\n\n    /**\n     * EXPERIMENTAL: Scans the object tree including nested arrays of objects, and\n     * converts all detected javascript dates to ODBC Strings.\n     * @param src - The object which is to be scanned.\n     * @returns The passed in object with any detected dates converted to odbc strings.\n     */\n    public static createApiDatesInObject(src:any):any\n    {\n        if(typeof src !== 'object' || src === null) return src;\n        if(CFKitUtil.isDate(src))\n        {\n            return src.toISOString();\n        }\n        \n        if((src instanceof Object))\n        {\n            \n            for (let [key, value] of Object.entries(src)) \n            {\n                src[key] = CFKitUtil.createApiDatesInObject(value);\n            }\n        }\n\n        if((src instanceof Array))\n        {\n            for (let i = 0; i < src.length; i++) {\n                src[i] = CFKitUtil.createApiDatesInObject(src[i]);  \n            }\n        }\n\n        return src;\n    }\n    \n    /**\n     * EXPERIMENTAL: Scans the object tree including nested arrays of objects, and\n     * converts all detected string which are in ODBC Date Time format to javascript dates objects.\n     * @param src - The object which is to be scanned.\n     * @returns The passed in object with any detected odbc strings replaced by date objects.\n     */\n    public static parseDatesInObject(src:any):any\n    {\n        if(src === null) return src;\n        if(typeof src === 'string')\n        {\n            if(CFKitUtil.isODBCDateTime(src))\n            {\n                return CFKitUtil.parseODBCdateTime(src);\n            }\n            return src;\n        }\n\n        if(typeof src !== 'object' || src === null) return src;\n        if((src instanceof Object))\n        {\n            \n            for (let [key, value] of Object.entries(src)) \n            {\n                src[key] = CFKitUtil.parseDatesInObject(value);\n            }\n        }\n\n        if((src instanceof Array))\n        {\n            for (let i = 0; i < src.length; i++) {\n                src[i] = CFKitUtil.parseDatesInObject(src[i]);  \n            }\n        }\n\n        return src;\n    }\n\n    /**\n     * EXPERIMENTAL: Scans the object tree including nested arrays of objects, and\n     * converts all detected javascript dates to ODBC Strings.\n     * @param src - The object which is to be scanned.\n     * @returns The passed in object with any detected dates converted to odbc strings.\n     */\n    public static createODBCDatesInObject(src:any):any\n    {\n        if(typeof src !== 'object' || src === null) return src;\n        if(CFKitUtil.isDate(src))\n        {\n            return CFKitUtil.ODBCDateTimeFormat(src);\n        }\n        \n        if((src instanceof Object))\n        {\n            \n            for (let [key, value] of Object.entries(src)) \n            {\n                src[key] = CFKitUtil.createODBCDatesInObject(value);\n            }\n        }\n\n        if((src instanceof Array))\n        {\n            for (let i = 0; i < src.length; i++) {\n                src[i] = CFKitUtil.createODBCDatesInObject(src[i]);  \n            }\n        }\n\n        return src;\n    }\n    /* ######################################################## */\n\n\n    /* ######################################################## */\n    /* CFKIT Related global lookups. */\n    public static countries:Country[] =\n    [\n        {id:0,name:\"--------\"},\n        {id:14,name:\"Australia\"},\n        {id:15,name:\"New Zealand\"},\n        {id:81,name:\"Germany\"},\n    ];\n\n    /**\n     * Returns a country type based on a given country identfier.\n     * \n     * @param id - The id of the country to be looked up.\n     * @returns The country matching the ID. undefined if the given id does not match a valid country.\n     */\n    public static country (id:number):Country|undefined {\n        const countries = CFKitUtil.countries;\n        return countries.find(country => country.id === id);\n    }\n    /* ######################################################## */\n}\n","export const getFirstDayLastDayUTC = (value: Date) =>\r\n{\r\n  // Returns the first and last days of the month - UTC\r\n  let fDay = new Date(Date.UTC( value.getUTCFullYear(), value.getUTCMonth(), 1))\r\n  let month = fDay.getUTCMonth();\r\n  month = month + 1;\r\n  let lDay = new Date ( fDay.getUTCFullYear(), month, 1)\r\n\r\n  return {firstDay: fDay, lastDay: lDay}\r\n};\r\n\r\nexport default getFirstDayLastDayUTC;","export const isFlagSet = (value: number, flag: number) =>\r\n{\r\n  // Returns true if the flag is set\r\n  if(value & flag){\r\n    return true\r\n  }\r\n  return false\r\n};\r\n\r\nexport default isFlagSet;\r\n"],"sourceRoot":""}